// Bun Snapshot v1, https://goo.gl/fbAQLP

exports[`Generated code snapshots user-validator.ts snapshot 1`] = `
"// Generated by @speria-jp/json-schema-validator-gen
// https://github.com/speria-jp/json-schema-validator-gen
// Do not edit manually
export type User = {
    id: number;
    name: string;
    email: string;
    age?: number;
    tags?: string[];
    role?: "admin" | "user" | "guest";
    location?: [
        number,
        number
    ];
};


export function validateUser(value: unknown): value is User {
    if (typeof value !== "object" || value === null || Array.isArray(value))
        return false;
    if (!("id" in value && "name" in value && "email" in value))
        return false;
    if (typeof value.id !== "number")
        return false;
    if (!Number.isInteger(value.id))
        return false;
    if (value.id < 1)
        return false;
    if (typeof value.name !== "string")
        return false;
    if (value.name.length < 1)
        return false;
    if (value.name.length > 100)
        return false;
    if (typeof value.email !== "string")
        return false;
    if (!/^[\\w.-]+@[\\w.-]+\\.[a-z]{2,}$/.test(value.email))
        return false;
    if ("age" in value) {
        if (typeof value.age !== "number")
            return false;
        if (!Number.isInteger(value.age))
            return false;
        if (value.age < 0)
            return false;
        if (value.age > 150)
            return false;
    }
    if ("tags" in value) {
        if (!Array.isArray(value.tags))
            return false;
        for (const item1 of value.tags) {
            if (typeof item1 !== "string")
                return false;
        }
    }
    if ("role" in value) {
        if (typeof value.role !== "string")
            return false;
        if (!["admin", "user", "guest"].includes(value.role))
            return false;
    }
    if ("location" in value) {
        if (!Array.isArray(value.location))
            return false;
        if (value.location.length !== 2)
            return false;
        if (typeof value.location[0] !== "number")
            return false;
        if (value.location[0] < -90)
            return false;
        if (value.location[0] > 90)
            return false;
        if (typeof value.location[1] !== "number")
            return false;
        if (value.location[1] < -180)
            return false;
        if (value.location[1] > 180)
            return false;
    }
    for (const key2 in value) {
        if (!["id", "name", "email", "age", "tags", "role", "location"].includes(key2))
            return false;
    }
    return true;
}
export function unsafeValidateUser(value: unknown): User {
    if (!validateUser(value)) {
        throw new Error("Validation failed: value is not User");
    }
    return value as User;
}
"
`;

exports[`Generated code snapshots complex-validator.ts snapshot 1`] = `
"// Generated by @speria-jp/json-schema-validator-gen
// https://github.com/speria-jp/json-schema-validator-gen
// Do not edit manually
export type Complex = {
    id: number;
    name: string;
    price: number;
    discount?: number;
    tags?: string[];
    metadata?: {
        manufacturer?: string;
        warranty?: number;
    };
    status?: "available" | "out-of-stock" | "discontinued";
    variants?: {
        sku: string;
        attributes: Record<string, unknown>;
    }[];
    shippingMethod?: {
        type: "standard";
        estimatedDays: number;
    } | {
        type: "express";
        guaranteedDate: string;
    };
    paymentOptions?: {
        creditCard: {
            lastFourDigits: string;
            brand: "visa" | "mastercard" | "amex";
        };
    } | {
        paypal: {
            email: string;
        };
    } | {
        bankTransfer: {
            accountNumber: string;
        };
    };
    features: {
        name: string;
        values: string | string[] | (string | number)[];
    }[];
};


export function validateComplex(value: unknown): value is Complex {
    if (typeof value !== "object" || value === null || Array.isArray(value))
        return false;
    if (!("id" in value && "name" in value && "price" in value && "features" in value))
        return false;
    if (typeof value.id !== "number")
        return false;
    if (!Number.isInteger(value.id))
        return false;
    if (value.id < 1)
        return false;
    if (typeof value.name !== "string")
        return false;
    if (value.name.length < 1)
        return false;
    if (value.name.length > 100)
        return false;
    if (typeof value.price !== "number")
        return false;
    if (value.price < 0)
        return false;
    if (value.price >= 1000000)
        return false;
    if ("discount" in value) {
        if (typeof value.discount !== "number")
            return false;
        if (value.discount < 0)
            return false;
        if (value.discount > 100)
            return false;
    }
    if ("tags" in value) {
        if (!Array.isArray(value.tags))
            return false;
        if (value.tags.length < 1)
            return false;
        if (value.tags.length > 10)
            return false;
        if (new Set(value.tags).size !== value.tags.length)
            return false;
        for (const item1 of value.tags) {
            if (typeof item1 !== "string")
                return false;
        }
    }
    if ("metadata" in value) {
        if (typeof value.metadata !== "object" || value.metadata === null || Array.isArray(value.metadata))
            return false;
        if (Object.keys(value.metadata).length < 1)
            return false;
        if (Object.keys(value.metadata).length > 5)
            return false;
        if ("manufacturer" in value.metadata) {
            if (typeof value.metadata.manufacturer !== "string")
                return false;
        }
        if ("warranty" in value.metadata) {
            if (typeof value.metadata.warranty !== "number")
                return false;
            if (!Number.isInteger(value.metadata.warranty))
                return false;
            if (value.metadata.warranty < 0)
                return false;
        }
    }
    if ("status" in value) {
        if (typeof value.status !== "string")
            return false;
        if (!["available", "out-of-stock", "discontinued"].includes(value.status))
            return false;
    }
    if ("variants" in value) {
        if (!Array.isArray(value.variants))
            return false;
        for (const item2 of value.variants) {
            if (typeof item2 !== "object" || item2 === null || Array.isArray(item2))
                return false;
            if (!("sku" in item2 && "attributes" in item2))
                return false;
            if (typeof item2.sku !== "string")
                return false;
            if (!/^[A-Z0-9]{6,}$/.test(item2.sku))
                return false;
            if (typeof item2.attributes !== "object" || item2.attributes === null || Array.isArray(item2.attributes))
                return false;
        }
    }
    if ("shippingMethod" in value) {
        if (!((() => {
            if (typeof value.shippingMethod !== "object" || value.shippingMethod === null || Array.isArray(value.shippingMethod))
                return false;
            if (!("type" in value.shippingMethod && "estimatedDays" in value.shippingMethod))
                return false;
            if (value.shippingMethod.type !== "standard")
                return false;
            if (typeof value.shippingMethod.estimatedDays !== "number")
                return false;
            if (!Number.isInteger(value.shippingMethod.estimatedDays))
                return false;
            if (value.shippingMethod.estimatedDays < 3)
                return false;
            if (value.shippingMethod.estimatedDays > 7)
                return false;
            return true;
        })() || (() => {
            if (typeof value.shippingMethod !== "object" || value.shippingMethod === null || Array.isArray(value.shippingMethod))
                return false;
            if (!("type" in value.shippingMethod && "guaranteedDate" in value.shippingMethod))
                return false;
            if (value.shippingMethod.type !== "express")
                return false;
            if (typeof value.shippingMethod.guaranteedDate !== "string")
                return false;
            if (!/^\\d{4}-\\d{2}-\\d{2}$/.test(value.shippingMethod.guaranteedDate))
                return false;
            return true;
        })()))
            return false;
    }
    if ("paymentOptions" in value) {
        if (!((() => {
            if (typeof value.paymentOptions !== "object" || value.paymentOptions === null || Array.isArray(value.paymentOptions))
                return false;
            if (!("creditCard" in value.paymentOptions))
                return false;
            if (typeof value.paymentOptions.creditCard !== "object" || value.paymentOptions.creditCard === null || Array.isArray(value.paymentOptions.creditCard))
                return false;
            if (!("lastFourDigits" in value.paymentOptions.creditCard && "brand" in value.paymentOptions.creditCard))
                return false;
            if (typeof value.paymentOptions.creditCard.lastFourDigits !== "string")
                return false;
            if (!/^\\d{4}$/.test(value.paymentOptions.creditCard.lastFourDigits))
                return false;
            if (typeof value.paymentOptions.creditCard.brand !== "string")
                return false;
            if (!["visa", "mastercard", "amex"].includes(value.paymentOptions.creditCard.brand))
                return false;
            return true;
        })() || (() => {
            if (typeof value.paymentOptions !== "object" || value.paymentOptions === null || Array.isArray(value.paymentOptions))
                return false;
            if (!("paypal" in value.paymentOptions))
                return false;
            if (typeof value.paymentOptions.paypal !== "object" || value.paymentOptions.paypal === null || Array.isArray(value.paymentOptions.paypal))
                return false;
            if (!("email" in value.paymentOptions.paypal))
                return false;
            if (typeof value.paymentOptions.paypal.email !== "string")
                return false;
            return true;
        })() || (() => {
            if (typeof value.paymentOptions !== "object" || value.paymentOptions === null || Array.isArray(value.paymentOptions))
                return false;
            if (!("bankTransfer" in value.paymentOptions))
                return false;
            if (typeof value.paymentOptions.bankTransfer !== "object" || value.paymentOptions.bankTransfer === null || Array.isArray(value.paymentOptions.bankTransfer))
                return false;
            if (!("accountNumber" in value.paymentOptions.bankTransfer))
                return false;
            if (typeof value.paymentOptions.bankTransfer.accountNumber !== "string")
                return false;
            if (value.paymentOptions.bankTransfer.accountNumber.length < 10)
                return false;
            return true;
        })()))
            return false;
    }
    if (!Array.isArray(value.features))
        return false;
    for (const item3 of value.features) {
        if (typeof item3 !== "object" || item3 === null || Array.isArray(item3))
            return false;
        if (!("name" in item3 && "values" in item3))
            return false;
        if (typeof item3.name !== "string")
            return false;
        if (!((() => {
            if (typeof item3.values !== "string")
                return false;
            return true;
        })() || (() => {
            if (!Array.isArray(item3.values))
                return false;
            for (const item4 of item3.values) {
                if (typeof item4 !== "string")
                    return false;
            }
            return true;
        })() || (() => {
            if (!Array.isArray(item3.values))
                return false;
            for (const item5 of item3.values) {
                if (!((() => {
                    if (typeof item5 !== "string")
                        return false;
                    return true;
                })() || (() => {
                    if (typeof item5 !== "number")
                        return false;
                    return true;
                })()))
                    return false;
            }
            return true;
        })()))
            return false;
    }
    for (const key6 in value) {
        if (!["id", "name", "price", "discount", "tags", "metadata", "status", "variants", "shippingMethod", "paymentOptions", "features"].includes(key6))
            return false;
    }
    return true;
}
export function unsafeValidateComplex(value: unknown): Complex {
    if (!validateComplex(value)) {
        throw new Error("Validation failed: value is not Complex");
    }
    return value as Complex;
}
"
`;

exports[`Generated code snapshots ref-validator.ts snapshot 1`] = `
"// Generated by @speria-jp/json-schema-validator-gen
// https://github.com/speria-jp/json-schema-validator-gen
// Do not edit manually
export type Ref = {
    id: number;
    name: string;
    address: {
        street: string;
        city: string;
        zipCode?: string;
    };
    workAddress?: {
        street: string;
        city: string;
        zipCode?: string;
    };
};


export function validateRef(value: unknown): value is Ref {
    if (typeof value !== "object" || value === null || Array.isArray(value))
        return false;
    if (!("id" in value && "name" in value && "address" in value))
        return false;
    if (typeof value.id !== "number")
        return false;
    if (!Number.isInteger(value.id))
        return false;
    if (typeof value.name !== "string")
        return false;
    if (typeof value.address !== "object" || value.address === null || Array.isArray(value.address))
        return false;
    if (!("street" in value.address && "city" in value.address))
        return false;
    if (typeof value.address.street !== "string")
        return false;
    if (typeof value.address.city !== "string")
        return false;
    if ("zipCode" in value.address) {
        if (typeof value.address.zipCode !== "string")
            return false;
        if (!/^\\d{5}$/.test(value.address.zipCode))
            return false;
    }
    if ("workAddress" in value) {
        if (typeof value.workAddress !== "object" || value.workAddress === null || Array.isArray(value.workAddress))
            return false;
        if (!("street" in value.workAddress && "city" in value.workAddress))
            return false;
        if (typeof value.workAddress.street !== "string")
            return false;
        if (typeof value.workAddress.city !== "string")
            return false;
        if ("zipCode" in value.workAddress) {
            if (typeof value.workAddress.zipCode !== "string")
                return false;
            if (!/^\\d{5}$/.test(value.workAddress.zipCode))
                return false;
        }
    }
    return true;
}
export function unsafeValidateRef(value: unknown): Ref {
    if (!validateRef(value)) {
        throw new Error("Validation failed: value is not Ref");
    }
    return value as Ref;
}
"
`;

exports[`Generated code snapshots multi-types.ts snapshot 1`] = `
"// Generated by @speria-jp/json-schema-validator-gen
// https://github.com/speria-jp/json-schema-validator-gen
// Do not edit manually
export type User = {
    id: string;
    name: string;
    email: string;
};


export type Post = {
    id: string;
    title: string;
    content: string;
    authorId: string;
    tags?: string[];
    published?: boolean;
};


export type Comment = {
    id: string;
    postId: string;
    authorId: string;
    text: string;
    createdAt: string;
};


export function validateUser(value: unknown): value is User {
    if (typeof value !== "object" || value === null || Array.isArray(value))
        return false;
    if (!("id" in value && "name" in value && "email" in value))
        return false;
    if (typeof value.id !== "string")
        return false;
    if (typeof value.name !== "string")
        return false;
    if (value.name.length < 1)
        return false;
    if (typeof value.email !== "string")
        return false;
    if (!/^[\\w.-]+@[\\w.-]+\\.[a-z]{2,}$/.test(value.email))
        return false;
    for (const key1 in value) {
        if (!["id", "name", "email"].includes(key1))
            return false;
    }
    return true;
}
export function unsafeValidateUser(value: unknown): User {
    if (!validateUser(value)) {
        throw new Error("Validation failed: value is not User");
    }
    return value as User;
}


export function validatePost(value: unknown): value is Post {
    if (typeof value !== "object" || value === null || Array.isArray(value))
        return false;
    if (!("id" in value && "title" in value && "content" in value && "authorId" in value))
        return false;
    if (typeof value.id !== "string")
        return false;
    if (typeof value.title !== "string")
        return false;
    if (value.title.length < 1)
        return false;
    if (value.title.length > 200)
        return false;
    if (typeof value.content !== "string")
        return false;
    if (typeof value.authorId !== "string")
        return false;
    if ("tags" in value) {
        if (!Array.isArray(value.tags))
            return false;
        for (const item1 of value.tags) {
            if (typeof item1 !== "string")
                return false;
        }
    }
    if ("published" in value) {
        if (typeof value.published !== "boolean")
            return false;
    }
    for (const key2 in value) {
        if (!["id", "title", "content", "authorId", "tags", "published"].includes(key2))
            return false;
    }
    return true;
}
export function unsafeValidatePost(value: unknown): Post {
    if (!validatePost(value)) {
        throw new Error("Validation failed: value is not Post");
    }
    return value as Post;
}


export function validateComment(value: unknown): value is Comment {
    if (typeof value !== "object" || value === null || Array.isArray(value))
        return false;
    if (!("id" in value && "postId" in value && "authorId" in value && "text" in value && "createdAt" in value))
        return false;
    if (typeof value.id !== "string")
        return false;
    if (typeof value.postId !== "string")
        return false;
    if (typeof value.authorId !== "string")
        return false;
    if (typeof value.text !== "string")
        return false;
    if (value.text.length < 1)
        return false;
    if (value.text.length > 1000)
        return false;
    if (typeof value.createdAt !== "string")
        return false;
    for (const key1 in value) {
        if (!["id", "postId", "authorId", "text", "createdAt"].includes(key1))
            return false;
    }
    return true;
}
export function unsafeValidateComment(value: unknown): Comment {
    if (!validateComment(value)) {
        throw new Error("Validation failed: value is not Comment");
    }
    return value as Comment;
}
"
`;
