// Generated by @speria-jp/json-schema-validator-gen
// https://github.com/speria-jp/json-schema-validator-gen
// Do not edit manually
export type User = {
    id: string;
    name: string;
    email: string;
};


export type Post = {
    id: string;
    title: string;
    content: string;
    authorId: string;
    tags?: string[];
    published?: boolean;
};


export type Comment = {
    id: string;
    postId: string;
    authorId: string;
    text: string;
    createdAt: string;
};


export function validateUser(value: unknown): value is User {
    if (typeof value !== "object" || value === null || Array.isArray(value))
        return false;
    if (!("id" in value && "name" in value && "email" in value))
        return false;
    if (typeof value.id !== "string")
        return false;
    if (typeof value.name !== "string")
        return false;
    if (value.name.length < 1)
        return false;
    if (typeof value.email !== "string")
        return false;
    if (!/^[\w.-]+@[\w.-]+\.[a-z]{2,}$/.test(value.email))
        return false;
    for (const key1 in value) {
        if (!["id", "name", "email"].includes(key1))
            return false;
    }
    return true;
}
export function unsafeValidateUser(value: unknown): User {
    if (!validateUser(value)) {
        throw new Error("Validation failed: value is not User");
    }
    return value as User;
}


export function validatePost(value: unknown): value is Post {
    if (typeof value !== "object" || value === null || Array.isArray(value))
        return false;
    if (!("id" in value && "title" in value && "content" in value && "authorId" in value))
        return false;
    if (typeof value.id !== "string")
        return false;
    if (typeof value.title !== "string")
        return false;
    if (value.title.length < 1)
        return false;
    if (value.title.length > 200)
        return false;
    if (typeof value.content !== "string")
        return false;
    if (typeof value.authorId !== "string")
        return false;
    if ("tags" in value) {
        if (!Array.isArray(value.tags))
            return false;
        for (const item1 of value.tags) {
            if (typeof item1 !== "string")
                return false;
        }
    }
    if ("published" in value) {
        if (typeof value.published !== "boolean")
            return false;
    }
    for (const key2 in value) {
        if (!["id", "title", "content", "authorId", "tags", "published"].includes(key2))
            return false;
    }
    return true;
}
export function unsafeValidatePost(value: unknown): Post {
    if (!validatePost(value)) {
        throw new Error("Validation failed: value is not Post");
    }
    return value as Post;
}


export function validateComment(value: unknown): value is Comment {
    if (typeof value !== "object" || value === null || Array.isArray(value))
        return false;
    if (!("id" in value && "postId" in value && "authorId" in value && "text" in value && "createdAt" in value))
        return false;
    if (typeof value.id !== "string")
        return false;
    if (typeof value.postId !== "string")
        return false;
    if (typeof value.authorId !== "string")
        return false;
    if (typeof value.text !== "string")
        return false;
    if (value.text.length < 1)
        return false;
    if (value.text.length > 1000)
        return false;
    if (typeof value.createdAt !== "string")
        return false;
    for (const key1 in value) {
        if (!["id", "postId", "authorId", "text", "createdAt"].includes(key1))
            return false;
    }
    return true;
}
export function unsafeValidateComment(value: unknown): Comment {
    if (!validateComment(value)) {
        throw new Error("Validation failed: value is not Comment");
    }
    return value as Comment;
}
