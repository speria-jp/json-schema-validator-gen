// Generated by @speria-jp/json-schema-validator-gen
// https://github.com/speria-jp/json-schema-validator-gen
// Do not edit manually
export type Ref = {
    id: number;
    name: string;
    address: {
        street: string;
        city: string;
        zipCode?: string;
    };
    workAddress?: {
        street: string;
        city: string;
        zipCode?: string;
    };
};


export function validateRef(value: unknown): value is Ref {
    if (typeof value !== "object" || value === null || Array.isArray(value))
        return false;
    if (!("id" in value && "name" in value && "address" in value))
        return false;
    if (typeof value.id !== "number")
        return false;
    if (!Number.isInteger(value.id))
        return false;
    if (typeof value.name !== "string")
        return false;
    if (typeof value.address !== "object" || value.address === null || Array.isArray(value.address))
        return false;
    if (!("street" in value.address && "city" in value.address))
        return false;
    if (typeof value.address.street !== "string")
        return false;
    if (typeof value.address.city !== "string")
        return false;
    if ("zipCode" in value.address) {
        if (typeof value.address.zipCode !== "string")
            return false;
        if (!/^\d{5}$/.test(value.address.zipCode))
            return false;
    }
    if ("workAddress" in value) {
        if (typeof value.workAddress !== "object" || value.workAddress === null || Array.isArray(value.workAddress))
            return false;
        if (!("street" in value.workAddress && "city" in value.workAddress))
            return false;
        if (typeof value.workAddress.street !== "string")
            return false;
        if (typeof value.workAddress.city !== "string")
            return false;
        if ("zipCode" in value.workAddress) {
            if (typeof value.workAddress.zipCode !== "string")
                return false;
            if (!/^\d{5}$/.test(value.workAddress.zipCode))
                return false;
        }
    }
    return true;
}
export function unsafeValidateRef(value: unknown): Ref {
    if (!validateRef(value)) {
        throw new Error("Validation failed: value is not Ref");
    }
    return value as Ref;
}
