// Generated by @speria-jp/json-schema-validator-gen
// https://github.com/speria-jp/json-schema-validator-gen
// Do not edit manually
export type User = {
    id: number;
    name: string;
    email: string;
    age?: number;
    tags?: string[];
    role?: "admin" | "user" | "guest";
    location?: [
        number,
        number
    ];
};


export function validateUser(value: unknown): value is User {
    if (typeof value !== "object" || value === null || Array.isArray(value))
        return false;
    if (!("id" in value && "name" in value && "email" in value))
        return false;
    if (typeof value.id !== "number")
        return false;
    if (!Number.isInteger(value.id))
        return false;
    if (value.id < 1)
        return false;
    if (typeof value.name !== "string")
        return false;
    if (value.name.length < 1)
        return false;
    if (value.name.length > 100)
        return false;
    if (typeof value.email !== "string")
        return false;
    if (!/^[\w.-]+@[\w.-]+\.[a-z]{2,}$/.test(value.email))
        return false;
    if ("age" in value) {
        if (typeof value.age !== "number")
            return false;
        if (!Number.isInteger(value.age))
            return false;
        if (value.age < 0)
            return false;
        if (value.age > 150)
            return false;
    }
    if ("tags" in value) {
        if (!Array.isArray(value.tags))
            return false;
        for (const item1 of value.tags) {
            if (typeof item1 !== "string")
                return false;
        }
    }
    if ("role" in value) {
        if (typeof value.role !== "string")
            return false;
        if (!["admin", "user", "guest"].includes(value.role))
            return false;
    }
    if ("location" in value) {
        if (!Array.isArray(value.location))
            return false;
        if (value.location.length !== 2)
            return false;
        if (typeof value.location[0] !== "number")
            return false;
        if (value.location[0] < -90)
            return false;
        if (value.location[0] > 90)
            return false;
        if (typeof value.location[1] !== "number")
            return false;
        if (value.location[1] < -180)
            return false;
        if (value.location[1] > 180)
            return false;
    }
    for (const key2 in value) {
        if (!["id", "name", "email", "age", "tags", "role", "location"].includes(key2))
            return false;
    }
    return true;
}
export function unsafeValidateUser(value: unknown): User {
    if (!validateUser(value)) {
        throw new Error("Validation failed: value is not User");
    }
    return value as User;
}
